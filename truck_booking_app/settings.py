"""
Django settings for truck_booking_app project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import date
from dotenv import load_dotenv
load_dotenv()

from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

DEBUG = os.environ.get('DEBUG')

ALLOWED_HOSTS_str = os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_str.split(',') if host.strip()]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'rest_framework',
    'rest_framework_simplejwt',
    'booking_app',
    'crispy_forms',
    'crispy_bootstrap5',
    'impersonate',
]

AUTH_USER_MODEL = 'booking_app.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'booking_app.middleware.UserLanguageMiddleware',
    'booking_app.middleware.LicenseCheckMiddleware',
    'booking_app.middleware.SessionActivityMiddleware',
    'impersonate.middleware.ImpersonateMiddleware',
]

ROOT_URLCONF = 'truck_booking_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'booking_app.context_processors.auth_extras',
                'booking_app.context_processors.site_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'truck_booking_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'truck_booking_db',
        'USER': 'postgres',
        'PASSWORD': '1990NunoLopes',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-pt'

TIME_ZONE = 'Europe/Lisbon'

USE_I18N = True

USE_TZ = True

LANGUAGES = [
    ('pt', 'PortuguÃªs'),
    ('en', 'English'),
]


LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# This is the directory where `collectstatic` will gather all static files for deployment.
# It must be an absolute path.
STATIC_ROOT = BASE_DIR / "staticfiles"

# This tells Django where to look for additional static files that are NOT tied to a specific app.
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication Redirect URLs
# The URL name to redirect to after a user logs in successfully
LOGIN_REDIRECT_URL = 'booking_app:vehicle_list'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = 'login'


# --- Email Configuration ---
# For development, print emails to the console
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# You can also set a default 'from' email address for your application
#DEFAULT_FROM_EMAIL = 'geral@nulopes.me'
#SERVER_EMAIL = 'geral@nulopes.me'

# If you later switch to a real SMTP server, you would configure it like this:
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_HOST = 'smtp-pt.securemail.pro'
#EMAIL_PORT = 465
#EMAIL_USE_SSL = True
#EMAIL_HOST_USER = 'geral@nulopes.me'
#EMAIL_HOST_PASSWORD = '1990NunoLopes!!'

# Media files (for user-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

APP_VERSION = 'v0.18.1'
APP_UPDATE_DATE = date(2025, 10, 30)

IMPERSONATE_PERMISSIONS = 'impersonate.permissions.staff'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # Formatters define how your log messages will look.
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    # Handlers decide what to do with a log message (e.g., write to file, show in console).
    "handlers": {
        "file": {
            "level": "DEBUG", # Log messages of level DEBUG and higher.
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "debug.log", # The log file will be in your project's root directory.
            "formatter": "verbose",
        },
    },
    # Loggers are the entry point. Your app will send messages to a logger.
    "loggers": {
        # This logger is specifically for your 'booking_app'.
        "booking_app": {
            "handlers": ["file"], # Send messages to the 'file' handler we defined above.
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# Credentials for sending email via the MS Graph API (loaded from .env file)
MS_GRAPH_TENANT_ID = os.environ.get('MS_GRAPH_TENANT_ID')
MS_GRAPH_CLIENT_ID = os.environ.get('MS_GRAPH_CLIENT_ID')
MS_GRAPH_CLIENT_SECRET = os.environ.get('MS_GRAPH_CLIENT_SECRET')

# The "From" address must be the same user account that you granted Mail.Send permissions to in Azure
MS_GRAPH_SENDER_EMAIL = os.environ.get('MS_GRAPH_SENDER_EMAIL')

LICENSE_KEY = os.getenv('LICENSE_KEY')
LICENSE_SERVER_URL = os.getenv('LICENSE_SERVER_URL')
INSTANCE_ID = os.getenv('INSTANCE_ID')

# Let Django know it's behind an SSL-offloading proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Trusted CSRF origins for Django >= 4.0 (include scheme)
CSRF_TRUSTED_ORIGINS = ["https://booking.nulopes.me"]
USE_X_FORWARDED_HOST = True

# Sessions expire after 1 day (in seconds)
SESSION_COOKIE_AGE = 86400
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Set default input/output formats
DATE_FORMAT = "d/m/Y"           # How Django displays dates
DATETIME_FORMAT = "d/m/Y H:i"   # Optional for date+time
SHORT_DATE_FORMAT = "d/m/Y"     # Used in admin etc.

# Accepted input formats (forms, admin, serializers)
DATE_INPUT_FORMATS = [
    "%d/%m/%Y",  # Flatpickr format
    "%Y-%m-%d",  # fallback ISO
]

# Localization settings
USE_L10N = False